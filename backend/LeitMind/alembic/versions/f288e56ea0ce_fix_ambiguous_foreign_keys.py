"""fix ambiguous foreign keys

Revision ID: f288e56ea0ce
Revises: 7369c8cf7f90
Create Date: 2024-12-30 15:38:36.125073

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "f288e56ea0ce"
down_revision: Union[str, None] = "7369c8cf7f90"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "answers",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("question_id", sa.Integer(), nullable=False),
        sa.Column("text", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(["question_id"], ["questions.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_table("in_app_purchases")
    op.drop_table("leaderboard_history")
    op.drop_table("streaks")
    op.drop_table("virtual_currency")
    op.drop_table("notifications")
    op.drop_table("progress")
    op.drop_table("attempts")
    op.drop_table("feedback")
    op.drop_table("social_connections")
    op.drop_table("user_achievements")
    op.drop_table("achievements")
    op.drop_table("user_settings")
    op.drop_table("leaderboards")
    op.add_column("questions", sa.Column("correct_answer_id", sa.Integer(), nullable=True))
    op.add_column("questions", sa.Column("explanation", sa.Text(), nullable=True))
    op.create_foreign_key(None, "questions", "answers", ["correct_answer_id"], ["id"], ondelete="SET NULL")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "questions", type_="foreignkey")
    op.drop_column("questions", "explanation")
    op.drop_column("questions", "correct_answer_id")
    op.create_table(
        "leaderboards",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("score", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("period_start", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("period_end", sa.DATE(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="leaderboards_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="leaderboards_pkey"),
    )
    op.create_table(
        "user_settings",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("language", sa.VARCHAR(length=10), autoincrement=False, nullable=True),
        sa.Column(
            "notification_frequency",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("theme", sa.VARCHAR(length=10), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="user_settings_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="user_settings_pkey"),
    )
    op.create_table(
        "achievements",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('achievements_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("icon_path", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="achievements_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "user_achievements",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("achievement_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "unlocked_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["achievement_id"],
            ["achievements.id"],
            name="user_achievements_achievement_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="user_achievements_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="user_achievements_pkey"),
    )
    op.create_table(
        "social_connections",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("friend_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column(  # noqa
            "connected_at",  # noqa
            postgresql.TIMESTAMP(),  # noqa
            server_default=sa.text("now()"),  # noqa
            autoincrement=False,  # noqa
            nullable=True,  # noqa
        ),  # noqa
        sa.CheckConstraint(
            "status::text = ANY (ARRAY['pending'::character varying, 'accepted'::character varying, 'blocked'::character varying]::text[])",
            name="check_status",
        ),
        sa.ForeignKeyConstraint(
            ["friend_id"],
            ["users.id"],
            name="social_connections_friend_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="social_connections_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="social_connections_pkey"),
    )
    op.create_table(
        "feedback",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("question_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("content", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "submitted_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["question_id"],
            ["questions.id"],
            name="feedback_question_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name="feedback_user_id_fkey", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", name="feedback_pkey"),
    )
    op.create_table(
        "attempts",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("question_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("is_correct", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "attempted_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["question_id"],
            ["questions.id"],
            name="attempts_question_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name="attempts_user_id_fkey", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", name="attempts_pkey"),
    )
    op.create_table(
        "progress",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("question_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("next_review", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("attempts", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.CheckConstraint(
            "status::text = ANY (ARRAY['completed'::character varying, 'pending'::character varying, 'in_progress'::character varying]::text[])",  # noqa
            name="check_status",
        ),
        sa.ForeignKeyConstraint(
            ["question_id"],
            ["questions.id"],
            name="progress_question_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name="progress_user_id_fkey", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", name="progress_pkey"),
    )
    op.create_table(
        "notifications",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("message", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("is_read", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "sent_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="notifications_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="notifications_pkey"),
    )
    op.create_table(
        "virtual_currency",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("balance", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "last_updated",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="virtual_currency_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="virtual_currency_pkey"),
    )
    op.create_table(
        "streaks",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("current_streak", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("best_streak", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("last_active_date", sa.DATE(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name="streaks_user_id_fkey", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", name="streaks_pkey"),
    )
    op.create_table(
        "leaderboard_history",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("period_start", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("period_end", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("rank", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("score", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="leaderboard_history_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="leaderboard_history_pkey"),
    )
    op.create_table(
        "in_app_purchases",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("item_name", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column(
            "price",
            sa.NUMERIC(precision=10, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("currency", sa.VARCHAR(length=10), autoincrement=False, nullable=False),
        sa.Column(
            "purchased_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="in_app_purchases_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="in_app_purchases_pkey"),
    )
    op.drop_table("answers")
    # ### end Alembic commands ###
